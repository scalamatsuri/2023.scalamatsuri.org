[
  {
    "id": "E1681521600",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "The Case For Effect Systems",
      "detail": "Scaling and stabilizing cloud services in the face of torrential volumes of traffic is one of the major problem spaces that defines our language ecosystem. Problems such as reliability, predictability, throughput, efficiency, self-healing, and such are the primary factors which largely dictate both architectural and implementation decisions. \n\nIn this talk, we will peel apart how these factors manifest on the JVM, ultimately motivating not only the asynchronous I/O paradigm in general but effect systems in particular, with a special emphasis on performance and efficiency in the real world.",
      "language": "English",
      "length": 40,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Daniel Spiewak",
        "icon": "https://avatars.githubusercontent.com/u/752?v=4",
        "twitter": "djspiewak",
        "github": "djspiewak"
      }]
    },
    "ja": {
      "title": "Effect システムのすゝめ",
      "detail": "大量のトラフィックを捌けるようにクラウド・サービスをスケールさせ、安定化させるというのは Scala という言語環境の一大テーマであると言える。信頼性、予測可能性、スループット、効率、自己復旧などのアーキテクチャ及び実装レベルでの設計判断の決め手となる問題だ。\n\nこのトークでは、これらの要素が JVM上でどのように表出するかを解明し、非同期 I/O というパラダイムに留まらず、特に実践での性能と効率という観点から Effect システムの必要性について論じたいと思う。\n\nDaniel Spiewak さんは、Disney Streaming 社チーフ・アーキテクト、かつ Cats Effect 作者。",
      "language": "English",
      "length": 40,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Daniel Spiewak",
        "icon": "https://avatars.githubusercontent.com/u/752?v=4",
        "twitter": "djspiewak",
        "github": "djspiewak"
      }]
    }
  },
  {
    "id": "J1681524900",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Introduction to Functional Programming with a CSV Import Implementation",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Yuichiro Iwai",
        "icon": "https://avatars.githubusercontent.com/u/6065514?s=96&v=4"
      }]
    },
    "ja": {
      "title": "CSVインポートで学ぶ実例関数型入門",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "岩井雄一郎",
        "icon": "https://avatars.githubusercontent.com/u/6065514?s=96&v=4"
      }]
    }
  },
  {
    "id": "J1681526400",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "The technology behind the contents creation at Track",
      "detail": "",
      "language": "Japanese",
      "length": 15,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Mitsuru Ogawa",
        "icon": ""
      }]
    },
    "ja": {
      "title": "Trackのプログラミングコンテンツ作成を支える技術",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "小川 充",
        "icon": ""
      }]
    }
  },
  {
    "id": "J1681531200",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Introduction to Scalafix and Scalafix Rule Writing",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Javakky",
        "icon": "https://pbs.twimg.com/profile_images/1077576484380790784/MbpJ94BM_400x400.jpg"
      }]
    },
    "ja": {
      "title": "Scalafix 入門および Scalafix ルール作成入門",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Javakky",
        "icon": "https://pbs.twimg.com/profile_images/1077576484380790784/MbpJ94BM_400x400.jpg"
      }]
    }
  },
  {
    "id": "J1681532700",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Refactoring of Domain Objects with Scalafix",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Naoki Aoyama",
        "icon": "https://pbs.twimg.com/profile_images/556312366862708736/jmQUaeoW_400x400.jpeg",
        "twitter": "@aoiroaoino"
      }]
    },
    "ja": {
      "title": "Scalafix を用いたドメインオブジェクトのリファクタリング",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Naoki Aoyama",
        "icon": "https://pbs.twimg.com/profile_images/556312366862708736/jmQUaeoW_400x400.jpeg",
        "twitter": "@aoiroaoino"
      }]
    }
  },
  {
    "id": "J1681534800",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Whoever controls the traverse controls the code",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "gakuzzzz",
        "icon": "https://pbs.twimg.com/profile_images/1431608839/ceb5e4f7-bec8-4a68-a86c-32d0c7ae4e22_400x400.png"
      }]
    },
    "ja": {
      "title": "traverseを制するものはコードを制す",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "がくぞ",
        "icon": "https://pbs.twimg.com/profile_images/1431608839/ceb5e4f7-bec8-4a68-a86c-32d0c7ae4e22_400x400.png"
      }]
    }
  },
  {
    "id": "J1681536300",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Scala nowadays at Chatwork",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Yoshitaka Fuji",
        "icon": ""
      }]
    },
    "ja": {
      "title": "ChatworkのScala近況",
      "detail": "",
      "language": "Japanese",
      "length": 15,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "藤井善隆",
        "icon": ""
      }]
    }
  },
  {
    "id": "E1681538400",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Say goodbye to implicits - contextual abstractions in Scala 3",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Magda Stożek",
        "icon": "https://avatars.githubusercontent.com/u/1413543?v=4"
      }]
    },
    "ja": {
      "title": "implicits よさらば: Scala 3 のコンテキスト抽象",
      "detail": "",
      "language": "Japanese",
      "length": 15,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Magda Stożek",
        "icon": "https://avatars.githubusercontent.com/u/1413543?v=4"
      }]
    }
  },
  {
    "id": "J1681539900",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Introducing COMPASS, Inc",
      "detail": "",
      "language": "Japanese",
      "length": 15,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Masaki Ogawa",
        "icon": ""
      }]
    },
    "ja": {
      "title": "株式会社COMPASS 会社・サービス紹介",
      "detail": "",
      "language": "Japanese",
      "length": 15,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "小川正幹",
        "icon": ""
      }]
    }
  },
  {
    "id": "E1681542000",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Gens & Lens: Making generators composable",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Aleksei Shamenev",
        "icon": "https://s.gravatar.com/avatar/62276b8e228c933b6a57aac76d9031bc"
      }]
    },
    "ja": {
      "title": "Gens & Lens: ジェネレータを合成可能にする",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Aleksei Shamenev",
        "icon": "https://s.gravatar.com/avatar/62276b8e228c933b6a57aac76d9031bc"
      }]
    }
  },
  {
    "id": "J1681543500",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Implement for Authorization-Effect using Extensible-Effect",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Tsubasa Matsukawa",
        "icon": "https://avatars.githubusercontent.com/u/1573032?s=96&v=4"
      }]
    },
    "ja": {
      "title": "Extensible Effectで実装する認可エフェクト",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "松川翼",
        "icon": "https://avatars.githubusercontent.com/u/1573032?s=96&v=4"
      }]
    }
  },
  {
    "id": "E1681610400",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Exploring Systems with Open Telemetry and Honeycomb",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Zach McCoy",
        "icon": "https://pbs.twimg.com/profile_images/1425616916442406914/YTHlOmPV_400x400.jpg"
      }]
    },
    "ja": {
      "title": "Open Telemetry と Honeycomb を用いたシステム調査",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Zach McCoy",
        "icon": "https://pbs.twimg.com/profile_images/1425616916442406914/YTHlOmPV_400x400.jpg"
      }]
    }
  },
  {
    "id": "E1681611900",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Composable Constraint Types",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Michael Perucca",
        "icon": "https://avatars.githubusercontent.com/u/30921036?v=4"
      }]
    },
    "ja": {
      "title": "合成可能な制約型",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Michael Perucca",
        "icon": "https://avatars.githubusercontent.com/u/30921036?v=4"
      }]
    }
  },
  {
    "id": "J1681614000",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "After products made with DDD & Scala",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "OSAWA Kota",
        "icon": "https://pbs.twimg.com/profile_images/1139412357480796161/9YzMvaKd_400x400.png"
      }]
    },
    "ja": {
      "title": "DDD&Scalaで作られたプロダクトはその後どうなったか?",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "大澤昂太",
        "icon": "https://pbs.twimg.com/profile_images/1139412357480796161/9YzMvaKd_400x400.png"
      }]
    }
  },
  {
    "id": "J1681615200",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Points of implementation of repository to avoid dead lock",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "TANGA Kenichi",
        "icon": "https://pbs.twimg.com/profile_images/1496771833240391685/NzaiFJFV_400x400.jpg"
      }]
    },
    "ja": {
      "title": "デッドロックを回避するRepository実装の勘所",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "丹賀健一",
        "icon": "https://pbs.twimg.com/profile_images/1496771833240391685/NzaiFJFV_400x400.jpg"
      }]
    }
  },
  {
    "id": "J1681618500",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Helix and Scala",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Eugene Yokota",
        "icon": "https://en.gravatar.com/userimage/4910561/aa5421808eae0364f0a9c29d0dc27816.jpg"
      }]
    },
    "ja": {
      "title": "Helix と Scala",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Eugene Yokota",
        "icon": "https://en.gravatar.com/userimage/4910561/aa5421808eae0364f0a9c29d0dc27816.jpg"
      }]
    }
  },
  {
    "id": "J1681620000",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "write fast ffi fast in Scala 3",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Y.ITO(110416)",
        "icon": "https://avatars.githubusercontent.com/u/39330037?v=4"
      }]
    },
    "ja": {
      "title": "write fast ffi fast in Scala 3",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Y.ITO(110416)",
        "icon": "https://avatars.githubusercontent.com/u/39330037?v=4"
      }]
    }
  },
  {
    "id": "J1681621800",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "RateLimit implemented by Eff",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "kzmake",
        "icon": "https://gravatar.com/avatar/504a6586cb4a6c46d86ce71ce7af2fa7?s=256"
      }]
    },
    "ja": {
      "title": "Effとリーキーバケットを使って実装するレートリミット",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "kzmake",
        "icon": "https://gravatar.com/avatar/504a6586cb4a6c46d86ce71ce7af2fa7?s=256"
      }]
    }
  },
  {
    "id": "J1681623300",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Character-talking movie generator in Scala",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Windymelt",
        "icon": "https://avatars.githubusercontent.com/u/1113940?v=4"
      }]
    },
    "ja": {
      "title": "解説動画作成ツールをScalaで作成している話",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Windymelt",
        "icon": "https://avatars.githubusercontent.com/u/1113940?v=4"
      }]
    }
  },
  {
    "id": "J1681624800",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Datatype Generic Programming with Scala 3",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "YOSHIMURA Hikaru",
        "icon": ""
      }]
    },
    "ja": {
      "title": "Datatype Generic Programming with Scala 3",
      "detail": "",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "YOSHIMURA Hikaru",
        "icon": ""
      }]
    }
  },
  {
    "id": "E1681626600",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Full-Stack Scala 3 with the Typelevel Stack",
      "detail": "",
      "language": "English",
      "length": 40,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Daniel Ciocirlan",
        "icon": "https://pbs.twimg.com/profile_images/1189887417349750785/bnnxYdFj_400x400.jpg"
      }]
    },
    "ja": {
      "title": "スタックを用いたフルスタック Scala 3",
      "detail": "",
      "language": "English",
      "length": 40,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Daniel Ciocirlan",
        "icon": "https://pbs.twimg.com/profile_images/1189887417349750785/bnnxYdFj_400x400.jpg"
      }]
    }
  },
  {
    "id": "E1681630200",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Generating production code",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Yohann Jardin",
        "icon": "https://avatars.githubusercontent.com/u/10663802?v=4"
      }]
    },
    "ja": {
      "title": "プロダクション・コードの生成",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Yohann Jardin",
        "icon": "https://avatars.githubusercontent.com/u/10663802?v=4"
      }]
    }
  },
  {
    "id": "E1681631700",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": ""
      },
      "youtube_embed_url": "",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "How to save time by letting Scala ecosystem work for you.",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Marcin Krykowski",
        "icon": "https://pbs.twimg.com/profile_images/1289693418688598022/q8jE7bxQ_400x400.jpg"
      }]
    },
    "ja": {
      "title": "Scala エコシステムをうまく利用して時短する方法",
      "detail": "",
      "language": "English",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [{
        "name": "Marcin Krykowski",
        "icon": "https://pbs.twimg.com/profile_images/1289693418688598022/q8jE7bxQ_400x400.jpg"
      }]
    }
  },
  {
    "id": "J1647653100",
    "isAdopted": true,
    "artifacts": {
      "slides": {
        "speakerdeck": {
          "data_id": ""
        },
        "other_url": "https://gakuzzzz.github.io/slides/abstract_type_member_introduction/"
      },
      "youtube_embed_url": "https://www.youtube.com/embed/TJ5Ud7USEaU",
      "youtube_embed_url_2": ""
    },
    "en": {
      "title": "Introduce Abstract Type Members",
      "detail": "In Scala, there is a language feature named Abstract Type Members.\nHowever, because of features that do not exist in Java, Kotlin, C#, etc., and because some of the problems that can be solved with Generics are covered, Abstract Type Members are not used even in situations where it is better to use them.\nIn this session, we will explain what Abstract Type Members are, how they are useful, and how they can be used in different ways from Generics, so that you can start using them tomorrow.",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [
        {
          "name": "NAKAMURA Manabu",
          "id": "gakuzzzz",
          "icon": "https://pbs.twimg.com/profile_images/1431608839/ceb5e4f7-bec8-4a68-a86c-32d0c7ae4e22_400x400.png",
          "organization": "(株)Tech to Value, (株)エフ・コード",
          "speaker_experience": [],
          "contributes": [
            "https://github.com/t2v/holidays",
            "",
            "https: //github.com/gakuzzzz/nullable-quantifier"
          ],
          "github": "gakuzzzz",
          "twitter": "gakuzzzz",
          "other_sns": ""
        }
      ]
    },
    "ja": {
      "title": "Abstract Type Members 入門",
      "detail": "Scala には Abstract Type Members(抽象型メンバー) と呼ばれる言語機能があります。\nしかし、Java や Kotlin, C# などには存在しない機能だったり、Generics と解決できる問題の領域が近かったりすることから、Abstract Type Members を利用した方が良い場面でも活用されていないことがあります。\nこのセッションでは、Abstract Type Members とはどんな機能でどんな役に立つのか、Generics との使い分け等について解説し、明日から使えるようにします。",
      "language": "Japanese",
      "length": 20,
      "tags": [],
      "keywords": [],
      "speakers": [
        {
          "name": "NAKAMURA Manabu",
          "id": "gakuzzzz",
          "icon": "https://pbs.twimg.com/profile_images/1431608839/ceb5e4f7-bec8-4a68-a86c-32d0c7ae4e22_400x400.png",
          "organization": "(株)Tech to Value, (株)エフ・コード",
          "speaker_experience": [],
          "contributes": [
            "https://github.com/t2v/holidays",
            "",
            "https: //github.com/gakuzzzz/nullable-quantifier"
          ],
          "github": "gakuzzzz",
          "twitter": "gakuzzzz",
          "other_sns": ""
        }
      ]
    }
  }
]